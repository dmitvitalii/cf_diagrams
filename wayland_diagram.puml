@startuml

class Surfaces {
  + Surfaces()
  + SetFrameCallback(callback: FrameCallback)
  + SetDisplayEventCallback(callback: DisplayEventCallback)

  - callback_mutex_: std::mutex
  - callback_: std::optional<FrameCallback>
  - event_callback_: std::optional<DisplayEventCallback>

  - HandleSurfaceFrame(...)
  - HandleSurfaceCreated(...)
  - HandleSurfaceDestroyed(...)
}


class WaylandServer {
  -server_ready_: bool
  -server_ready_mutex_: std::mutex
  -server_ready_cv_: std::condition_variable
  -server_thread_: std::thread
  -server_state_: std::unique_ptr<internal::WaylandServerState>
  +WaylandServer(wayland_socket_fd: int)
  +~WaylandServer()
  +SetFrameCallback(callback: Surfaces::FrameCallback)
  +SetDisplayEventCallback(callback: DisplayEventCallback)
  +ServerLoop(fd: int)
}

stereotype FrameCallback {
  +operator()(...)
}
note top of FrameCallback: using FrameCallback = std::function<void(\n    std::uint32_t /*display_number*/,\n    std::uint32_t /*frame_width*/,\n    std::uint32_t /*frame_height*/,\n    std::uint32_t /*frame_stride_bytes*/,\n    std::uint8_t* /*frame_bytes*/\n)>;


struct DisplayCreatedEvent {
  +display_number: std::uint32_t
  +display_width: std::uint32_t
  +display_height: std::uint32_t
}

struct DisplayDestroyedEvent {
  +display_number: std::uint32_t
}

stereotype DisplayEventCallback<DisplayEvent = [DisplayCreatedEvent | DisplayDestroyedEvent] > {
  +operator()(event: const DisplayEvent&)
}
 

class WaylandServerState {
  +display_: wl_display
  +surfaces_: Surfaces
}


WaylandServer o-- WaylandServerState : sets GenerateProcessedFrameCallbackImpl (a.k.a. FrameCallback)\nand DisplayEventCallback >
WaylandServerState ..> Surfaces : sets GenerateProcessedFrameCallbackImpl (a.k.a. FrameCallback)\nand DisplayEventCallback >

WaylandServerState ..> wl_display

Surfaces "1" o-- "0..1" FrameCallback
Surfaces "1" o-- "0..1" DisplayEventCallback


DisplayEventCallback -- DisplayCreatedEvent 
DisplayEventCallback -- DisplayDestroyedEvent

@enduml

