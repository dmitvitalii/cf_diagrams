@startuml

package wayland_server_protocol {

struct wl_surface_interface {
    + destroy(wl_client, wl_resource): void
    + attach(wl_client, wl_resource, wl_resource, int32_t, int32_t): void
    + damage(wl_client, wl_resource, int32_t, int32_t, int32_t, int32_t): void
    + frame(wl_client, wl_resource, uint32_t): void
    + set_opaque_region(wl_client, wl_resource, wl_resource): void
    + set_input_region(wl_client, wl_resource, wl_resource): void
    + commit(wl_client, wl_resource): void
    + set_buffer_transform(wl_client, wl_resource, int32_t): void
    + set_buffer_scale(wl_client, wl_resource, int32_t): void
    + damage_buffer(wl_client, wl_resource, int32_t, int32_t, int32_t, int32_t): void
}

struct wl_region_interface {
    + destroy(wl_client, wl_resource): void
    + add(wl_client, wl_resource, int32_t, int32_t, int32_t, int32_t): void
    + subtract(wl_client, wl_resource, int32_t, int32_t, int32_t, int32_t): void
}

struct wl_compositor_interface {
    + create_surface(wl_client, wl_resource, uint32_t): void
    + create_region(wl_client, wl_resource, uint32_t): void
}

}

object wayland_compositor {
    <b><color:Green>// wl_region_interface mapping
    +region_destroy(wl_resource*)
    +region_add(wl_resource*, int32_t, int32_t, int32_t, int32_t)
    +region_subtract(wl_resource*, int32_t, int32_t, int32_t, int32_t)

    \n<b><color:Green>// wl_surface_interface mapping
    +surface_destroy(wl_resource*)
    +surface_attach(wl_resource*, wl_resource*, int32_t, int32_t)
    +surface_damage(wl_resource*, int32_t, int32_t, int32_t, int32_t)
    +surface_frame(wl_resource*, uint32_t)
    +surface_set_opaque_region(wl_resource*, wl_resource*)
    +surface_set_input_region(wl_resource*, wl_resource*)
    +surface_commit(wl_resource*)
    +surface_set_buffer_transform(wl_resource*, int32_t)
    +surface_set_buffer_scale(wl_resource*, int32_t)
    +surface_damage_buffer(wl_resource*, int32_t, int32_t, int32_t, int32_t)
    +surface_destroy_resource_callback(wl_resource*)

    \n<b><color:Green>// wl_compositor_interface mapping
    +compositor_create_surface(wl_client*, wl_resource*, uint32_t)
    +compositor_create_region(wl_client*, wl_resource*, uint32_t)
    +compositor_destroy_resource_callback(wl_resource*)

    \n<b><color:Green>// wayland_compositor.h
    +bind_compositor(wl_client*, void*, uint32_t, uint32_t)
    +BindCompositorInterface(wl_display*, Surfaces*)

}

wl_compositor_interface --|> wayland_compositor
wl_surface_interface --|> wayland_compositor
wl_region_interface --|> wayland_compositor

wayland_compositor *-- Surface : calls as wl_surface_interface >
wayland_compositor *-- Region: calls as wl_region_interface >

@enduml
