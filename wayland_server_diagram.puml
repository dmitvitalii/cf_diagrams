@startuml

class WaylandServer {
  -server_ready_: bool
  -server_ready_mutex_: std::mutex
  -server_ready_cv_: std::condition_variable
  -server_thread_: std::thread
  -server_state_: std::unique_ptr<internal::WaylandServerState>
  +WaylandServer(<color:LightSlateGray>wayland_socket_fd: int</color>)
  +~WaylandServer()
  +SetFrameCallback(<color:LightSlateGray>callback: Surfaces::FrameCallback</color>)
  +SetDisplayEventCallback(<color:LightSlateGray>callback: DisplayEventCallback</color>)
  +ServerLoop(<color:LightSlateGray>fd: int</color>)
}

class WaylandServerState {
  +display_: wl_display
  +surfaces_: Surfaces
}

WaylandServer o-- WaylandServerState : sets GenerateProcessedFrameCallbackImpl (a.k.a. FrameCallback)\nand DisplayEventCallback >
WaylandServer --> wayland_compositor : ServerLoop calls BindCompositorInterface

WaylandServerState ..> wl_display

@enduml
